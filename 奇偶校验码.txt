
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_NONSTDC_NO_DEPRECATE	//使用非标准函数
#define _CRT_SECURE_NO_WARNINGS		//不弹窗警告

#include <stdio.h>
#include <stdlib.h>

#define uint8_t unsigned char
#define uint16_t unsigned int

/*
 * PARITY_CHECK_DATA_TYPE: 数据位的类型
 * PARITY_CHECK_PACK_TYPE: 奇偶校验后封装的数据包的类型
 * 说明：可以利用这两个别名定义不同长度的数据位，适用性更强。
 *       但是需要注意数据位要预留一位存放奇偶校验位（如数据位的类型为无符号16位时，它的数据范围为 0 ~ 2^15）
 */
typedef uint16_t  PARITY_CHECK_DATA_TYPE;
typedef uint16_t PARITY_CHECK_PACK_TYPE;

//整数的二进制转化 
void FuncOutputBin(uint16_t value)
{
	char string[17];   //形参类型uint32最大为16位，因此我这里定义了大小为17的字符串数组存放
	itoa(value, string, 2);//char * itoa(int value,char * string,int radix);
							/* value:与转换的数据；string:目标字符串的地址；radix:转换后的进制数*/
	printf("%s\r\n", string);
}

/*
 * value: 待发送的数据
 * mode : 1表示奇校验，0表示偶校验
 * 返回值：运用奇偶校验封装好的数据
*/
PARITY_CHECK_PACK_TYPE ParityCheckSend(PARITY_CHECK_DATA_TYPE value, uint8_t mode)
{
	uint8_t i = 0;
	PARITY_CHECK_PACK_TYPE result = 0;
	uint8_t count = 0;
	for (i = 0; (value >> i) != 0; i++) {
		if ((value >> i) & 0x01) {
			count++; //用于统计整数转化为二进制后1的个数 
		}
	}
	if (count % 2 == 0) { //1的个数为偶数 
		switch (mode)
		{
		case 0://采用偶校验 
			//最后一位补0
			result = ((PARITY_CHECK_PACK_TYPE)value << 1);
			break;
		case 1://采用奇校验 
			//最后一位补1
			result = ((PARITY_CHECK_PACK_TYPE)value << 1) | 0x01;
			break;
		default:
			return 0;
		}
	}
	else {	//1的个数为奇数
		switch (mode)
		{
		case 0://采用偶校验
			//最后一位补1
			result = ((PARITY_CHECK_PACK_TYPE)value << 1) | 0x01;
			break;
		case 1://采用奇校验
			//最后一位补0
			result = ((PARITY_CHECK_PACK_TYPE)value << 1);
			break;
		default:
			return 0;
		}
	}
	return result;
}

/*
 * value: 收到的待解析的数据
 * mode : 1表示奇校验，0表示偶校验
 * 返回值：用奇偶校验解析后的数据，无效数据返回0
*/
PARITY_CHECK_DATA_TYPE ParityCheckRecieve(PARITY_CHECK_PACK_TYPE value, uint8_t mode)
{
	uint8_t i = 0;
	PARITY_CHECK_DATA_TYPE result = 0;
	uint8_t count = 0;
	for (i = 0; (value >> i) != 0; i++) {
		if ((value >> i) & 0x01) {
			count++; //用于统计整数转化为二进制后1的个数 
		}
	}
	switch (mode)
	{
	case 0://偶校验 
		if (count % 2 == 0) {//如果得到的数据1的位为偶数个，说明是有效数据 
			result = (PARITY_CHECK_DATA_TYPE)(value >> 1);
			return result;
		}
		else {
			return 0;
		}
	case 1://奇校验 
		if (count % 2 == 1) {//如果得到的数据1的位为奇数个，说明是有效数据
			result = (PARITY_CHECK_DATA_TYPE)(value >> 1);
			return result;
		}
		else {
			return 0;
		}
	default:
		return 0;
	}
}

int main(void)
{
	uint16_t input = 0;
	printf("请输入一个数：");
	scanf("%d", &input);
	printf("原始的值为：");
	FuncOutputBin(input);
	printf("偶校验后的值为：");
	FuncOutputBin(ParityCheckSend(input, 0));
	printf("奇校验后的值为：");
	FuncOutputBin(ParityCheckSend(input, 1));
	printf("解析奇校验后的值为：");
	FuncOutputBin(ParityCheckRecieve(ParityCheckSend(input, 1), 1));
	printf("解析偶校验后的值为：");
	FuncOutputBin(ParityCheckRecieve(ParityCheckSend(input, 0), 0));
	return 0;
}

