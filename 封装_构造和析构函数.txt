#include<iostream>
using namespace std;

//构造数语法：类名()｛
//1.构造函教，无返回值也不写void
//2.函数名称和类型名相同
//3.构造函数可以有参数，故可以发生重载
//4.程序在调用对象时会自动调用构造函数无须手动调用，且只会调用一次


//析构函数语法：~类名（）{}
//1.析构函教，无返回值也不写void
//2.函数名称和类型名相同,在名称前需要加" ~ "
//3.析构函数不可以有参数，故不可以发生重载
//4.程序在对象销毁前会自动调用析构，无需手动调用。且只会调用一次

/*    构造和析构函数都是必须有的实现，如果我们不提供，编译器就会提供一个空实现的构造和析构*/

//对象的初始化和清理
//1.构造函数 进行初始化操作
class Person
{
public:
	//1.1、构造函数
	//没有返回值 不用写void 
	//函数名 与类名相同
	//构造函数可以有参数，可以发生重载
	//创造对象的时候，构造函数会自动调用，且只会调用一次

	Person()//构造函数：没有返回值，且名称和类相同的函数（可以有参数）
	{
		cout << "Person 构造函数的调用" << endl;
	}
	
	//2.析构函数 进行清理的操作
	//析构函教，无返回值也不写void
	//函数名称和类型名相同,在名称前需要加" ~ "
	//析构函数不可以有参数，故不可以发生重载
	//程序在对象销毁前会自动调用析构，无需手动调用。且只会调用一次
	~Person()//析构函数：语法上只比构造函数在前面的多一个" ~ "
	{
		cout << "~Person 析构函数的调用" << endl;
	}


};


void test01()
{
	//Person p;//在栈上的数据，test01执行完毕后，释放这个对象
			 //而析构函数会在销毁前调用一次，因此Person和~Person都会执行一次
}

int main()
{
	Person p;//当类型在main里面创建的时候，因为还没有被销毁，因此只有Person会执行
	//test01();
	system("pause");//如果屏蔽掉此行，则同样会执行两个函数
	return 0;
}